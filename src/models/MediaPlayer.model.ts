export interface playerState {
  activeTextTrack: null;
  audioTracks: undefined;
  autoPaused: false;
  autoplay: true;
  buffered: TimeRanges;
  controller: undefined;
  controls: false;
  crossOrigin: null;
  currentSrc: string;
  currentTime: number;
  defaultMuted: true;
  defaultPlaybackRate: 1;
  duration: number;
  ended: false;
  error: null;
  hasStarted: true;
  height: 0;
  isActive: false;
  isFullscreen: false;
  loop: true;
  mediaGroup: undefined;
  muted: true;
  networkState: 1;
  paused: false;
  playbackRate: 1;
  played: TimeRanges;
  poster: string;
  preload: 'auto';
  readyState: 4;
  seekable: TimeRanges;
  seeking: false;
  seekingTime: 0;
  src: string;
  srcObject: null;
  textTracks: TextTrackList;
  userActivity: true;
  videoHeight: 1080;
  videoTracks: undefined;
  videoWidth: 1920;
  volume: 1;
  waiting: false;
  width: 0;
}

interface VideoActions {
  activate: () => void;
  activateTextTrack: () => void;
  changeRate: () => void;
  changeVolume: (v: number) => void;
  forward: () => void;
  handleAbort: () => void;
  handleCanPlay: () => void;
  handleCanPlayThrough: () => void;
  handleDurationChange: () => void;
  handleEmptied: () => void;
  handleEnd: () => void;
  handleEndSeeking: () => void;
  handleError: () => void;
  handleFullscreenChange: () => void;
  handleLoadStart: () => void;
  handleLoadedData: () => void;
  handleLoadedMetaData: () => void;
  handlePause: () => void;
  handlePlay: () => void;
  handlePlaying: () => void;
  handleProgressChange: () => void;
  handleRateChange: () => void;
  handleResize: () => void;
  handleSeeked: () => void;
  handleSeeking: () => void;
  handleSeekingTime: () => void;
  handleStalled: () => void;
  handleSuspend: () => void;
  handleTimeUpdate: () => void;
  handleVolumeChange: () => void;
  handleWaiting: () => void;
  mute: (state: boolean) => void;
  pause: () => void;
  play: () => void;
  replay: () => void;
  seek: () => void;
  toggleFullscreen: () => void;
  togglePlay: () => void;
  userActivate: () => void;
}
